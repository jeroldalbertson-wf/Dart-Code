task:
  env:
    FLUTTER_PATH: "$CIRRUS_WORKING_DIR/with spaces/flutter"
    DART_PATH: "$CIRRUS_WORKING_DIR/with spaces/dart"
    PATH: "$FLUTTER_PATH/bin:$DART_PATH/bin:$PATH"
    ELECTRON_NO_ATTACH_CONSOLE: 1

  matrix:
    - name: Linux, Dart Stable, Code Stable
      container:
        image: ubuntu:bionic
      env:
        OS: linux
        DART_CHANNEL: stable
        FLUTTER_BRANCH: dev
        CODE_VERSION: stable
    - name: Mac, Dart Stable, Code Stable
      osx_instance:
        image: high-sierra-xcode-9.4.1
      env:
        OS: macos
        DART_CHANNEL: stable
        FLUTTER_BRANCH: dev
        CODE_VERSION: stable

  install_apt_packages_script: |
    apt-get update
    apt-get -y install curl wget git ruby2.5 gnupg
    curl -sL https://deb.nodesource.com/setup_8.x | bash -
    apt-get -y install nodejs
    gem install dpl

  vscode_setup_script: |
    if [[ "$OS" == "linux" ]]; then
      apt-get -y install libsecret-1-dev libstdc++6 gcc-4.8 xvfb
      export CXX="g++-4.8" CC="gcc-4.8" DISPLAY=:99.0;
      sh -e Xvfb;
    fi;

  install_dart_script: |
    mkdir -p "$DART_PATH"
    cd "$DART_PATH"
    curl https://storage.googleapis.com/dart-archive/channels/$DART_CHANNEL/release/latest/sdk/dartsdk-$OS-x64-release.zip > dart-sdk.zip
    unzip dart-sdk.zip > /dev/null
    cd "$CIRRUS_WORKING_DIR"

  install_flutter_script: |
    mkdir -p "$FLUTTER_PATH"
    cd "$FLUTTER_PATH"
    git clone -b $FLUTTER_BRANCH https://github.com/flutter/flutter.git .
    cd "$CIRRUS_WORKING_DIR"

  pub_cache:
    folder: "$HOME/.pub-cache"
    # Pub cache is unrelated to engine version, but it's a convenient thing that changes now and
    # then which will prevent this cache just growing over time as versions changed.
    fingerprint_script: cat "$FLUTTER_PATH/bin/internal/engine.version"

  flutter_cache:
    folder: "$FLUTTER_PATH/bin/cache"
    fingerprint_script: cat "$FLUTTER_PATH/bin/internal/engine.version"

  configure_flutter_script: |
    echo $PATH
    echo $FLUTTER_PATH
    pwd
    ls $FLUTTER_PATH
    flutter config --no-analytics
    flutter update-packages

  print_versions_script: |
    dart --version
    flutter --version
    node --version
    npm --version

  flutter_doctor_script: |
    flutter doctor

  install_npm_packages_script: |
    npm install --depth 0 --unsafe-perm

  configure_code_climate_script: |
    if [[ "$OS" == "linux" ]; then
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
    else
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter;
    fi
    chmod +x ./cc-test-reporter;
    ./cc-test-reporter before-build;

  compile_script: |
    npm run vscode:prepublish

  lint_script: |
    npm run lint

  test_script: |
    npm test

  ensure_no_dart_processes_script: |
    ps -ax | grep -v grep | grep dart || true
    if [[ $(pgrep -x dart) ]]; then
      echo 'DART WAS FOUND';
      fail();
    fi;

  upload_logs_script: |
    if [[ "$CIRRUS_PR" = "" ]; then
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".test_results" --upload-dir="$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".dart_code_test_logs" --upload-dir="logs/$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
    fi

  upload_code_coverage_script: |
    if [[ "$CODE_VERSION" == "stable" ]] && [[ "$DART_CHANNEL" == "stable" ]]; then
      ./cc-test-reporter after-build --prefix ../../;
    fi
